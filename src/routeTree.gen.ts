/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server';

import { Route as rootRouteImport } from './routes/__root';
import { Route as AuthRouteRouteImport } from './routes/_auth/route';
import { Route as PublicIndexRouteImport } from './routes/_public/index';
import { Route as AuthVerifyEmailRouteImport } from './routes/_auth/verify-email';
import { Route as AuthResetPasswordRouteImport } from './routes/_auth/reset-password';
import { Route as AuthRegisterRouteImport } from './routes/_auth/register';
import { Route as AuthLoginRouteImport } from './routes/_auth/login';
import { Route as AuthForgotPasswordRouteImport } from './routes/_auth/forgot-password';
import { Route as PublicDemoRouteRouteImport } from './routes/_public/demo/route';
import { Route as AppUsersRouteRouteImport } from './routes/_app/users/route';
import { Route as PublicDemoIndexRouteImport } from './routes/_public/demo/index';
import { Route as AppUsersIndexRouteImport } from './routes/_app/users/index';
import { Route as AppDashboardIndexRouteImport } from './routes/_app/dashboard/index';
import { Route as PublicDemoEmailRouteImport } from './routes/_public/demo/email';
import { Route as PublicDemoColorsRouteImport } from './routes/_public/demo/colors';
import { Route as AppUsersUserIdIndexRouteImport } from './routes/_app/users/$userId/index';
import { Route as AppUsersUserIdPostsRouteRouteImport } from './routes/_app/users/$userId/posts/route';
import { Route as AppUsersUserIdPostsPostIdRouteImport } from './routes/_app/users/$userId/posts/$postId';
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$';

const rootServerRouteImport = createServerRootRoute();

const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any);
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/_public/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const AuthVerifyEmailRoute = AuthVerifyEmailRouteImport.update({
  id: '/verify-email',
  path: '/verify-email',
  getParentRoute: () => AuthRouteRoute,
} as any);
const AuthResetPasswordRoute = AuthResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => AuthRouteRoute,
} as any);
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any);
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any);
const AuthForgotPasswordRoute = AuthForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRouteRoute,
} as any);
const PublicDemoRouteRoute = PublicDemoRouteRouteImport.update({
  id: '/_public/demo',
  path: '/demo',
  getParentRoute: () => rootRouteImport,
} as any);
const AppUsersRouteRoute = AppUsersRouteRouteImport.update({
  id: '/_app/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any);
const PublicDemoIndexRoute = PublicDemoIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicDemoRouteRoute,
} as any);
const AppUsersIndexRoute = AppUsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppUsersRouteRoute,
} as any);
const AppDashboardIndexRoute = AppDashboardIndexRouteImport.update({
  id: '/_app/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any);
const PublicDemoEmailRoute = PublicDemoEmailRouteImport.update({
  id: '/email',
  path: '/email',
  getParentRoute: () => PublicDemoRouteRoute,
} as any);
const PublicDemoColorsRoute = PublicDemoColorsRouteImport.update({
  id: '/colors',
  path: '/colors',
  getParentRoute: () => PublicDemoRouteRoute,
} as any);
const AppUsersUserIdIndexRoute = AppUsersUserIdIndexRouteImport.update({
  id: '/$userId/',
  path: '/$userId/',
  getParentRoute: () => AppUsersRouteRoute,
} as any);
const AppUsersUserIdPostsRouteRoute =
  AppUsersUserIdPostsRouteRouteImport.update({
    id: '/$userId/posts',
    path: '/$userId/posts',
    getParentRoute: () => AppUsersRouteRoute,
  } as any);
const AppUsersUserIdPostsPostIdRoute =
  AppUsersUserIdPostsPostIdRouteImport.update({
    id: '/$postId',
    path: '/$postId',
    getParentRoute: () => AppUsersUserIdPostsRouteRoute,
  } as any);
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any);

export interface FileRoutesByFullPath {
  '/users': typeof AppUsersRouteRouteWithChildren;
  '/demo': typeof PublicDemoRouteRouteWithChildren;
  '/forgot-password': typeof AuthForgotPasswordRoute;
  '/login': typeof AuthLoginRoute;
  '/register': typeof AuthRegisterRoute;
  '/reset-password': typeof AuthResetPasswordRoute;
  '/verify-email': typeof AuthVerifyEmailRoute;
  '/': typeof PublicIndexRoute;
  '/demo/colors': typeof PublicDemoColorsRoute;
  '/demo/email': typeof PublicDemoEmailRoute;
  '/dashboard': typeof AppDashboardIndexRoute;
  '/users/': typeof AppUsersIndexRoute;
  '/demo/': typeof PublicDemoIndexRoute;
  '/users/$userId/posts': typeof AppUsersUserIdPostsRouteRouteWithChildren;
  '/users/$userId': typeof AppUsersUserIdIndexRoute;
  '/users/$userId/posts/$postId': typeof AppUsersUserIdPostsPostIdRoute;
}
export interface FileRoutesByTo {
  '/forgot-password': typeof AuthForgotPasswordRoute;
  '/login': typeof AuthLoginRoute;
  '/register': typeof AuthRegisterRoute;
  '/reset-password': typeof AuthResetPasswordRoute;
  '/verify-email': typeof AuthVerifyEmailRoute;
  '/': typeof PublicIndexRoute;
  '/demo/colors': typeof PublicDemoColorsRoute;
  '/demo/email': typeof PublicDemoEmailRoute;
  '/dashboard': typeof AppDashboardIndexRoute;
  '/users': typeof AppUsersIndexRoute;
  '/demo': typeof PublicDemoIndexRoute;
  '/users/$userId/posts': typeof AppUsersUserIdPostsRouteRouteWithChildren;
  '/users/$userId': typeof AppUsersUserIdIndexRoute;
  '/users/$userId/posts/$postId': typeof AppUsersUserIdPostsPostIdRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/_auth': typeof AuthRouteRouteWithChildren;
  '/_app/users': typeof AppUsersRouteRouteWithChildren;
  '/_public/demo': typeof PublicDemoRouteRouteWithChildren;
  '/_auth/forgot-password': typeof AuthForgotPasswordRoute;
  '/_auth/login': typeof AuthLoginRoute;
  '/_auth/register': typeof AuthRegisterRoute;
  '/_auth/reset-password': typeof AuthResetPasswordRoute;
  '/_auth/verify-email': typeof AuthVerifyEmailRoute;
  '/_public/': typeof PublicIndexRoute;
  '/_public/demo/colors': typeof PublicDemoColorsRoute;
  '/_public/demo/email': typeof PublicDemoEmailRoute;
  '/_app/dashboard/': typeof AppDashboardIndexRoute;
  '/_app/users/': typeof AppUsersIndexRoute;
  '/_public/demo/': typeof PublicDemoIndexRoute;
  '/_app/users/$userId/posts': typeof AppUsersUserIdPostsRouteRouteWithChildren;
  '/_app/users/$userId/': typeof AppUsersUserIdIndexRoute;
  '/_app/users/$userId/posts/$postId': typeof AppUsersUserIdPostsPostIdRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/users'
    | '/demo'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/verify-email'
    | '/'
    | '/demo/colors'
    | '/demo/email'
    | '/dashboard'
    | '/users/'
    | '/demo/'
    | '/users/$userId/posts'
    | '/users/$userId'
    | '/users/$userId/posts/$postId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/verify-email'
    | '/'
    | '/demo/colors'
    | '/demo/email'
    | '/dashboard'
    | '/users'
    | '/demo'
    | '/users/$userId/posts'
    | '/users/$userId'
    | '/users/$userId/posts/$postId';
  id:
    | '__root__'
    | '/_auth'
    | '/_app/users'
    | '/_public/demo'
    | '/_auth/forgot-password'
    | '/_auth/login'
    | '/_auth/register'
    | '/_auth/reset-password'
    | '/_auth/verify-email'
    | '/_public/'
    | '/_public/demo/colors'
    | '/_public/demo/email'
    | '/_app/dashboard/'
    | '/_app/users/'
    | '/_public/demo/'
    | '/_app/users/$userId/posts'
    | '/_app/users/$userId/'
    | '/_app/users/$userId/posts/$postId';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren;
  AppUsersRouteRoute: typeof AppUsersRouteRouteWithChildren;
  PublicDemoRouteRoute: typeof PublicDemoRouteRouteWithChildren;
  PublicIndexRoute: typeof PublicIndexRoute;
  AppDashboardIndexRoute: typeof AppDashboardIndexRoute;
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute;
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute;
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport;
  '/api/auth/$': typeof ApiAuthSplatServerRoute;
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath;
  fullPaths: '/api/auth/$';
  fileServerRoutesByTo: FileServerRoutesByTo;
  to: '/api/auth/$';
  id: '__root__' | '/api/auth/$';
  fileServerRoutesById: FileServerRoutesById;
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_public/': {
      id: '/_public/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof PublicIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_auth/verify-email': {
      id: '/_auth/verify-email';
      path: '/verify-email';
      fullPath: '/verify-email';
      preLoaderRoute: typeof AuthVerifyEmailRouteImport;
      parentRoute: typeof AuthRouteRoute;
    };
    '/_auth/reset-password': {
      id: '/_auth/reset-password';
      path: '/reset-password';
      fullPath: '/reset-password';
      preLoaderRoute: typeof AuthResetPasswordRouteImport;
      parentRoute: typeof AuthRouteRoute;
    };
    '/_auth/register': {
      id: '/_auth/register';
      path: '/register';
      fullPath: '/register';
      preLoaderRoute: typeof AuthRegisterRouteImport;
      parentRoute: typeof AuthRouteRoute;
    };
    '/_auth/login': {
      id: '/_auth/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof AuthLoginRouteImport;
      parentRoute: typeof AuthRouteRoute;
    };
    '/_auth/forgot-password': {
      id: '/_auth/forgot-password';
      path: '/forgot-password';
      fullPath: '/forgot-password';
      preLoaderRoute: typeof AuthForgotPasswordRouteImport;
      parentRoute: typeof AuthRouteRoute;
    };
    '/_public/demo': {
      id: '/_public/demo';
      path: '/demo';
      fullPath: '/demo';
      preLoaderRoute: typeof PublicDemoRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_app/users': {
      id: '/_app/users';
      path: '/users';
      fullPath: '/users';
      preLoaderRoute: typeof AppUsersRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_public/demo/': {
      id: '/_public/demo/';
      path: '/';
      fullPath: '/demo/';
      preLoaderRoute: typeof PublicDemoIndexRouteImport;
      parentRoute: typeof PublicDemoRouteRoute;
    };
    '/_app/users/': {
      id: '/_app/users/';
      path: '/';
      fullPath: '/users/';
      preLoaderRoute: typeof AppUsersIndexRouteImport;
      parentRoute: typeof AppUsersRouteRoute;
    };
    '/_app/dashboard/': {
      id: '/_app/dashboard/';
      path: '/dashboard';
      fullPath: '/dashboard';
      preLoaderRoute: typeof AppDashboardIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_public/demo/email': {
      id: '/_public/demo/email';
      path: '/email';
      fullPath: '/demo/email';
      preLoaderRoute: typeof PublicDemoEmailRouteImport;
      parentRoute: typeof PublicDemoRouteRoute;
    };
    '/_public/demo/colors': {
      id: '/_public/demo/colors';
      path: '/colors';
      fullPath: '/demo/colors';
      preLoaderRoute: typeof PublicDemoColorsRouteImport;
      parentRoute: typeof PublicDemoRouteRoute;
    };
    '/_app/users/$userId/': {
      id: '/_app/users/$userId/';
      path: '/$userId';
      fullPath: '/users/$userId';
      preLoaderRoute: typeof AppUsersUserIdIndexRouteImport;
      parentRoute: typeof AppUsersRouteRoute;
    };
    '/_app/users/$userId/posts': {
      id: '/_app/users/$userId/posts';
      path: '/$userId/posts';
      fullPath: '/users/$userId/posts';
      preLoaderRoute: typeof AppUsersUserIdPostsRouteRouteImport;
      parentRoute: typeof AppUsersRouteRoute;
    };
    '/_app/users/$userId/posts/$postId': {
      id: '/_app/users/$userId/posts/$postId';
      path: '/$postId';
      fullPath: '/users/$userId/posts/$postId';
      preLoaderRoute: typeof AppUsersUserIdPostsPostIdRouteImport;
      parentRoute: typeof AppUsersUserIdPostsRouteRoute;
    };
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$';
      path: '/api/auth/$';
      fullPath: '/api/auth/$';
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
  }
}

interface AuthRouteRouteChildren {
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute;
  AuthLoginRoute: typeof AuthLoginRoute;
  AuthRegisterRoute: typeof AuthRegisterRoute;
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute;
  AuthVerifyEmailRoute: typeof AuthVerifyEmailRoute;
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
  AuthVerifyEmailRoute: AuthVerifyEmailRoute,
};

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
);

interface AppUsersUserIdPostsRouteRouteChildren {
  AppUsersUserIdPostsPostIdRoute: typeof AppUsersUserIdPostsPostIdRoute;
}

const AppUsersUserIdPostsRouteRouteChildren: AppUsersUserIdPostsRouteRouteChildren =
  {
    AppUsersUserIdPostsPostIdRoute: AppUsersUserIdPostsPostIdRoute,
  };

const AppUsersUserIdPostsRouteRouteWithChildren =
  AppUsersUserIdPostsRouteRoute._addFileChildren(
    AppUsersUserIdPostsRouteRouteChildren,
  );

interface AppUsersRouteRouteChildren {
  AppUsersIndexRoute: typeof AppUsersIndexRoute;
  AppUsersUserIdPostsRouteRoute: typeof AppUsersUserIdPostsRouteRouteWithChildren;
  AppUsersUserIdIndexRoute: typeof AppUsersUserIdIndexRoute;
}

const AppUsersRouteRouteChildren: AppUsersRouteRouteChildren = {
  AppUsersIndexRoute: AppUsersIndexRoute,
  AppUsersUserIdPostsRouteRoute: AppUsersUserIdPostsRouteRouteWithChildren,
  AppUsersUserIdIndexRoute: AppUsersUserIdIndexRoute,
};

const AppUsersRouteRouteWithChildren = AppUsersRouteRoute._addFileChildren(
  AppUsersRouteRouteChildren,
);

interface PublicDemoRouteRouteChildren {
  PublicDemoColorsRoute: typeof PublicDemoColorsRoute;
  PublicDemoEmailRoute: typeof PublicDemoEmailRoute;
  PublicDemoIndexRoute: typeof PublicDemoIndexRoute;
}

const PublicDemoRouteRouteChildren: PublicDemoRouteRouteChildren = {
  PublicDemoColorsRoute: PublicDemoColorsRoute,
  PublicDemoEmailRoute: PublicDemoEmailRoute,
  PublicDemoIndexRoute: PublicDemoIndexRoute,
};

const PublicDemoRouteRouteWithChildren = PublicDemoRouteRoute._addFileChildren(
  PublicDemoRouteRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  AppUsersRouteRoute: AppUsersRouteRouteWithChildren,
  PublicDemoRouteRoute: PublicDemoRouteRouteWithChildren,
  PublicIndexRoute: PublicIndexRoute,
  AppDashboardIndexRoute: AppDashboardIndexRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
};
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>();
