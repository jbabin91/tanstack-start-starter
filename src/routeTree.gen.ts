/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as FeedRouteImport } from './routes/feed';
import { Route as ColorsRouteImport } from './routes/colors';
import { Route as UsersRouteRouteImport } from './routes/users/route';
import { Route as IndexRouteImport } from './routes/index';
import { Route as UsersIndexRouteImport } from './routes/users/index';
import { Route as UsersUserIdIndexRouteImport } from './routes/users/$userId/index';
import { Route as UsersUserIdPostsRouteRouteImport } from './routes/users/$userId/posts/route';
import { Route as UsersUserIdPostsPostIdRouteImport } from './routes/users/$userId/posts/$postId';

const FeedRoute = FeedRouteImport.update({
  id: '/feed',
  path: '/feed',
  getParentRoute: () => rootRouteImport,
} as any);
const ColorsRoute = ColorsRouteImport.update({
  id: '/colors',
  path: '/colors',
  getParentRoute: () => rootRouteImport,
} as any);
const UsersRouteRoute = UsersRouteRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersRouteRoute,
} as any);
const UsersUserIdIndexRoute = UsersUserIdIndexRouteImport.update({
  id: '/$userId/',
  path: '/$userId/',
  getParentRoute: () => UsersRouteRoute,
} as any);
const UsersUserIdPostsRouteRoute = UsersUserIdPostsRouteRouteImport.update({
  id: '/$userId/posts',
  path: '/$userId/posts',
  getParentRoute: () => UsersRouteRoute,
} as any);
const UsersUserIdPostsPostIdRoute = UsersUserIdPostsPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => UsersUserIdPostsRouteRoute,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/users': typeof UsersRouteRouteWithChildren;
  '/colors': typeof ColorsRoute;
  '/feed': typeof FeedRoute;
  '/users/': typeof UsersIndexRoute;
  '/users/$userId/posts': typeof UsersUserIdPostsRouteRouteWithChildren;
  '/users/$userId': typeof UsersUserIdIndexRoute;
  '/users/$userId/posts/$postId': typeof UsersUserIdPostsPostIdRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/colors': typeof ColorsRoute;
  '/feed': typeof FeedRoute;
  '/users': typeof UsersIndexRoute;
  '/users/$userId/posts': typeof UsersUserIdPostsRouteRouteWithChildren;
  '/users/$userId': typeof UsersUserIdIndexRoute;
  '/users/$userId/posts/$postId': typeof UsersUserIdPostsPostIdRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/users': typeof UsersRouteRouteWithChildren;
  '/colors': typeof ColorsRoute;
  '/feed': typeof FeedRoute;
  '/users/': typeof UsersIndexRoute;
  '/users/$userId/posts': typeof UsersUserIdPostsRouteRouteWithChildren;
  '/users/$userId/': typeof UsersUserIdIndexRoute;
  '/users/$userId/posts/$postId': typeof UsersUserIdPostsPostIdRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/users'
    | '/colors'
    | '/feed'
    | '/users/'
    | '/users/$userId/posts'
    | '/users/$userId'
    | '/users/$userId/posts/$postId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/colors'
    | '/feed'
    | '/users'
    | '/users/$userId/posts'
    | '/users/$userId'
    | '/users/$userId/posts/$postId';
  id:
    | '__root__'
    | '/'
    | '/users'
    | '/colors'
    | '/feed'
    | '/users/'
    | '/users/$userId/posts'
    | '/users/$userId/'
    | '/users/$userId/posts/$postId';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  UsersRouteRoute: typeof UsersRouteRouteWithChildren;
  ColorsRoute: typeof ColorsRoute;
  FeedRoute: typeof FeedRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/feed': {
      id: '/feed';
      path: '/feed';
      fullPath: '/feed';
      preLoaderRoute: typeof FeedRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/colors': {
      id: '/colors';
      path: '/colors';
      fullPath: '/colors';
      preLoaderRoute: typeof ColorsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/users': {
      id: '/users';
      path: '/users';
      fullPath: '/users';
      preLoaderRoute: typeof UsersRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/users/': {
      id: '/users/';
      path: '/';
      fullPath: '/users/';
      preLoaderRoute: typeof UsersIndexRouteImport;
      parentRoute: typeof UsersRouteRoute;
    };
    '/users/$userId/': {
      id: '/users/$userId/';
      path: '/$userId';
      fullPath: '/users/$userId';
      preLoaderRoute: typeof UsersUserIdIndexRouteImport;
      parentRoute: typeof UsersRouteRoute;
    };
    '/users/$userId/posts': {
      id: '/users/$userId/posts';
      path: '/$userId/posts';
      fullPath: '/users/$userId/posts';
      preLoaderRoute: typeof UsersUserIdPostsRouteRouteImport;
      parentRoute: typeof UsersRouteRoute;
    };
    '/users/$userId/posts/$postId': {
      id: '/users/$userId/posts/$postId';
      path: '/$postId';
      fullPath: '/users/$userId/posts/$postId';
      preLoaderRoute: typeof UsersUserIdPostsPostIdRouteImport;
      parentRoute: typeof UsersUserIdPostsRouteRoute;
    };
  }
}

interface UsersUserIdPostsRouteRouteChildren {
  UsersUserIdPostsPostIdRoute: typeof UsersUserIdPostsPostIdRoute;
}

const UsersUserIdPostsRouteRouteChildren: UsersUserIdPostsRouteRouteChildren = {
  UsersUserIdPostsPostIdRoute: UsersUserIdPostsPostIdRoute,
};

const UsersUserIdPostsRouteRouteWithChildren =
  UsersUserIdPostsRouteRoute._addFileChildren(
    UsersUserIdPostsRouteRouteChildren,
  );

interface UsersRouteRouteChildren {
  UsersIndexRoute: typeof UsersIndexRoute;
  UsersUserIdPostsRouteRoute: typeof UsersUserIdPostsRouteRouteWithChildren;
  UsersUserIdIndexRoute: typeof UsersUserIdIndexRoute;
}

const UsersRouteRouteChildren: UsersRouteRouteChildren = {
  UsersIndexRoute: UsersIndexRoute,
  UsersUserIdPostsRouteRoute: UsersUserIdPostsRouteRouteWithChildren,
  UsersUserIdIndexRoute: UsersUserIdIndexRoute,
};

const UsersRouteRouteWithChildren = UsersRouteRoute._addFileChildren(
  UsersRouteRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UsersRouteRoute: UsersRouteRouteWithChildren,
  ColorsRoute: ColorsRoute,
  FeedRoute: FeedRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
