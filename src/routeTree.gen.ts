/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as PublicIndexRouteImport } from './routes/_public/index';
import { Route as PublicFormDemoRouteImport } from './routes/_public/form-demo';
import { Route as PublicColorsRouteImport } from './routes/_public/colors';
import { Route as AppUsersRouteRouteImport } from './routes/_app/users/route';
import { Route as AppUsersIndexRouteImport } from './routes/_app/users/index';
import { Route as AppUsersUserIdIndexRouteImport } from './routes/_app/users/$userId/index';
import { Route as AppUsersUserIdPostsRouteRouteImport } from './routes/_app/users/$userId/posts/route';
import { Route as AppUsersUserIdPostsPostIdRouteImport } from './routes/_app/users/$userId/posts/$postId';

const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/_public/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const PublicFormDemoRoute = PublicFormDemoRouteImport.update({
  id: '/_public/form-demo',
  path: '/form-demo',
  getParentRoute: () => rootRouteImport,
} as any);
const PublicColorsRoute = PublicColorsRouteImport.update({
  id: '/_public/colors',
  path: '/colors',
  getParentRoute: () => rootRouteImport,
} as any);
const AppUsersRouteRoute = AppUsersRouteRouteImport.update({
  id: '/_app/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any);
const AppUsersIndexRoute = AppUsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppUsersRouteRoute,
} as any);
const AppUsersUserIdIndexRoute = AppUsersUserIdIndexRouteImport.update({
  id: '/$userId/',
  path: '/$userId/',
  getParentRoute: () => AppUsersRouteRoute,
} as any);
const AppUsersUserIdPostsRouteRoute =
  AppUsersUserIdPostsRouteRouteImport.update({
    id: '/$userId/posts',
    path: '/$userId/posts',
    getParentRoute: () => AppUsersRouteRoute,
  } as any);
const AppUsersUserIdPostsPostIdRoute =
  AppUsersUserIdPostsPostIdRouteImport.update({
    id: '/$postId',
    path: '/$postId',
    getParentRoute: () => AppUsersUserIdPostsRouteRoute,
  } as any);

export interface FileRoutesByFullPath {
  '/users': typeof AppUsersRouteRouteWithChildren;
  '/colors': typeof PublicColorsRoute;
  '/form-demo': typeof PublicFormDemoRoute;
  '/': typeof PublicIndexRoute;
  '/users/': typeof AppUsersIndexRoute;
  '/users/$userId/posts': typeof AppUsersUserIdPostsRouteRouteWithChildren;
  '/users/$userId': typeof AppUsersUserIdIndexRoute;
  '/users/$userId/posts/$postId': typeof AppUsersUserIdPostsPostIdRoute;
}
export interface FileRoutesByTo {
  '/colors': typeof PublicColorsRoute;
  '/form-demo': typeof PublicFormDemoRoute;
  '/': typeof PublicIndexRoute;
  '/users': typeof AppUsersIndexRoute;
  '/users/$userId/posts': typeof AppUsersUserIdPostsRouteRouteWithChildren;
  '/users/$userId': typeof AppUsersUserIdIndexRoute;
  '/users/$userId/posts/$postId': typeof AppUsersUserIdPostsPostIdRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/_app/users': typeof AppUsersRouteRouteWithChildren;
  '/_public/colors': typeof PublicColorsRoute;
  '/_public/form-demo': typeof PublicFormDemoRoute;
  '/_public/': typeof PublicIndexRoute;
  '/_app/users/': typeof AppUsersIndexRoute;
  '/_app/users/$userId/posts': typeof AppUsersUserIdPostsRouteRouteWithChildren;
  '/_app/users/$userId/': typeof AppUsersUserIdIndexRoute;
  '/_app/users/$userId/posts/$postId': typeof AppUsersUserIdPostsPostIdRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/users'
    | '/colors'
    | '/form-demo'
    | '/'
    | '/users/'
    | '/users/$userId/posts'
    | '/users/$userId'
    | '/users/$userId/posts/$postId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/colors'
    | '/form-demo'
    | '/'
    | '/users'
    | '/users/$userId/posts'
    | '/users/$userId'
    | '/users/$userId/posts/$postId';
  id:
    | '__root__'
    | '/_app/users'
    | '/_public/colors'
    | '/_public/form-demo'
    | '/_public/'
    | '/_app/users/'
    | '/_app/users/$userId/posts'
    | '/_app/users/$userId/'
    | '/_app/users/$userId/posts/$postId';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  AppUsersRouteRoute: typeof AppUsersRouteRouteWithChildren;
  PublicColorsRoute: typeof PublicColorsRoute;
  PublicFormDemoRoute: typeof PublicFormDemoRoute;
  PublicIndexRoute: typeof PublicIndexRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public/': {
      id: '/_public/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof PublicIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_public/form-demo': {
      id: '/_public/form-demo';
      path: '/form-demo';
      fullPath: '/form-demo';
      preLoaderRoute: typeof PublicFormDemoRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_public/colors': {
      id: '/_public/colors';
      path: '/colors';
      fullPath: '/colors';
      preLoaderRoute: typeof PublicColorsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_app/users': {
      id: '/_app/users';
      path: '/users';
      fullPath: '/users';
      preLoaderRoute: typeof AppUsersRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_app/users/': {
      id: '/_app/users/';
      path: '/';
      fullPath: '/users/';
      preLoaderRoute: typeof AppUsersIndexRouteImport;
      parentRoute: typeof AppUsersRouteRoute;
    };
    '/_app/users/$userId/': {
      id: '/_app/users/$userId/';
      path: '/$userId';
      fullPath: '/users/$userId';
      preLoaderRoute: typeof AppUsersUserIdIndexRouteImport;
      parentRoute: typeof AppUsersRouteRoute;
    };
    '/_app/users/$userId/posts': {
      id: '/_app/users/$userId/posts';
      path: '/$userId/posts';
      fullPath: '/users/$userId/posts';
      preLoaderRoute: typeof AppUsersUserIdPostsRouteRouteImport;
      parentRoute: typeof AppUsersRouteRoute;
    };
    '/_app/users/$userId/posts/$postId': {
      id: '/_app/users/$userId/posts/$postId';
      path: '/$postId';
      fullPath: '/users/$userId/posts/$postId';
      preLoaderRoute: typeof AppUsersUserIdPostsPostIdRouteImport;
      parentRoute: typeof AppUsersUserIdPostsRouteRoute;
    };
  }
}

interface AppUsersUserIdPostsRouteRouteChildren {
  AppUsersUserIdPostsPostIdRoute: typeof AppUsersUserIdPostsPostIdRoute;
}

const AppUsersUserIdPostsRouteRouteChildren: AppUsersUserIdPostsRouteRouteChildren =
  {
    AppUsersUserIdPostsPostIdRoute: AppUsersUserIdPostsPostIdRoute,
  };

const AppUsersUserIdPostsRouteRouteWithChildren =
  AppUsersUserIdPostsRouteRoute._addFileChildren(
    AppUsersUserIdPostsRouteRouteChildren,
  );

interface AppUsersRouteRouteChildren {
  AppUsersIndexRoute: typeof AppUsersIndexRoute;
  AppUsersUserIdPostsRouteRoute: typeof AppUsersUserIdPostsRouteRouteWithChildren;
  AppUsersUserIdIndexRoute: typeof AppUsersUserIdIndexRoute;
}

const AppUsersRouteRouteChildren: AppUsersRouteRouteChildren = {
  AppUsersIndexRoute: AppUsersIndexRoute,
  AppUsersUserIdPostsRouteRoute: AppUsersUserIdPostsRouteRouteWithChildren,
  AppUsersUserIdIndexRoute: AppUsersUserIdIndexRoute,
};

const AppUsersRouteRouteWithChildren = AppUsersRouteRoute._addFileChildren(
  AppUsersRouteRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  AppUsersRouteRoute: AppUsersRouteRouteWithChildren,
  PublicColorsRoute: PublicColorsRoute,
  PublicFormDemoRoute: PublicFormDemoRoute,
  PublicIndexRoute: PublicIndexRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
